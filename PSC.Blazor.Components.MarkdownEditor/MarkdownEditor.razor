@using System.Linq.Expressions

<div id="markdownEditor">
	<ul class="nav nav-tabs mb-3" id="editorTabs" role="tablist">
		<li class="nav-item" role="presentation">
			<a class="nav-link @(isWriteActive ? "active" : "")" id="editor-tab" 
			   data-toggle="tab" href="#editor" role="tab"
			   aria-controls="editor" aria-selected="true" @onclick:preventDefault 
			   @onclick="() => HandleWriteClick()">Write</a>
		</li>
		<li class="nav-item @(isWriteActive ? "" : "active")" role="presentation">
			<a class="nav-link" id="preview-tab" data-toggle="tab" href="#preview" role="tab"
			   aria-controls="preview" aria-selected="false" @onclick:preventDefault 
			   @onclick="() => HandlePreviewClick()">Preview</a>
		</li>
		@if (EnableToolbar)
		{
			<li class="nav-item ml-auto">
				<button class="btn btn-sm btn-secondary" @onclick:preventDefault 
						@onclick="() => HandleBoldClick()"><i class="fas fa-bold"></i></button>
				<button class="btn btn-sm btn-secondary" @onclick:preventDefault 
						@onclick="() => HandleItalicClick()"><i class="fas fa-italic"></i></button>
				<button class="btn btn-sm btn-secondary" @onclick:preventDefault 
						@onclick="() => HandleListClick()"><i class="fas fa-list"></i></button>
			</li>
		}
	</ul>

	<div class="tab-content" id="editorTabContent">
		@if (isWriteActive)
		{
			<div class="tab-pane fade show active" id="editor" role="tabpanel" 
			     aria-labelledby="editor-tab">
				<textarea id="@id" value="@Value" @oninput="HandleInput" 
						  class="@_fieldCssClasses form-control" rows="@_rows"></textarea>
				<span class="text-muted">Learn more about MarkDown 
					<a href="" @onclick:preventDefault @onclick="() => HandleHelpClick()">here.</a>
				</span>
				@if (showHelp)
				{
					<div class="alert alert-info" role="alert">
						<MarkdownHelp />
						<button type="button" class="btn btn-sm btn-secondary" @onclick:preventDefault 
								@onclick="() => HandleCloseHelpClick()">Close Help</button>
					</div>
				}
			</div>
		}
		else
		{
			<div class="tab-pane fade show active" id="preview" role="tabpanel" aria-labelledby="preview-tab">
				@((MarkupString)_previewText)
			</div>
		}
	</div>
</div>

@code { 
	[Parameter]
	public string Value { get; set; }

	[Parameter]
	public EventCallback<string> ValueChanged { get; set; }

	[Parameter]
	public Expression<Func<string>> ValueExpression { get; set; }

	[Parameter]
	public bool EnableToolbar { get; set; } = true;

	[Parameter]
	public string id { get; set; }

	[CascadingParameter]
	private EditContext CascadedEditContext { get; set; }

	private bool isWriteActive = true;

	private string _previewText = "";
	private int _rows = 6;
	private bool showHelp = false;
	private FieldIdentifier _fieldIdentifier;
	private string _fieldCssClasses => CascadedEditContext?.FieldCssClass(_fieldIdentifier) ?? "";

	protected override void OnInitialized()
	{
		_fieldIdentifier = FieldIdentifier.Create(ValueExpression);
	}

	private void CalculateSize(string value)
	{
		_rows = Math.Max(value.Split('\n').Length, value.Split('\r').Length);
		_rows = Math.Max(_rows, 6);
	}

	private void HandleHelpClick()
	{
		showHelp = true;
	}

	private void HandleCloseHelpClick()
	{
		showHelp = false;
	}

	private async Task HandleInput(ChangeEventArgs args)
	{
		CalculateSize(args.Value.ToString());

		await ValueChanged.InvokeAsync(args.Value.ToString());

		CascadedEditContext?.NotifyFieldChanged(_fieldIdentifier);
		_previewText = MarkdownParser.Parse(args.Value.ToString());
	}

	private void UpdatePreview()
	{
		_previewText = MarkdownParser.Parse(Value.ToString());
	}

	private void HandleBoldClick()
	{
		Value = $"{Value} **(Bolded Text Here)**";
		UpdatePreview();
	}

	private void HandleItalicClick()
	{
		Value = $"{Value} *(Italic Text Here)*";
		UpdatePreview();
	}

	private void HandleListClick()
	{
		Value = $"{Value} \n - List Item";
		UpdatePreview();
	}

	private void HandleWriteClick()
	{
		isWriteActive = true;
	}

	private void HandlePreviewClick()
	{
		isWriteActive = false;
	}
}